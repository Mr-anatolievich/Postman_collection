{
	"info": {
		"_postman_id": "2e34a547-cd13-46e7-b845-4b8506249826",
		"name": "10 tests example",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "test REST API - swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Correct response format JSON\", function(){\r",
							"    pm.response.to.have.jsonBody()\r",
							"})\r",
							"\r",
							"pm.test('Check all the declareted fields', function(){\r",
							"    let jsonData = pm.response.json()\r",
							"    pm.expect(jsonData).to.have.property('people')\r",
							"    pm.expect(jsonData).to.have.property('planets')\r",
							"    pm.expect(jsonData).to.have.property('films')\r",
							"    pm.expect(jsonData).to.have.property('species')\r",
							"    pm.expect(jsonData).to.have.property('vehicles')\r",
							"    pm.expect(jsonData).to.have.property('starships')\r",
							"})\r",
							"\r",
							"pm.test('check if Value is not a NULL', function(){\r",
							"    let jsonData = pm.response.json()\r",
							"    pm.expect(jsonData.people).to.not.equal(null)\r",
							"    pm.expect(jsonData.planets).to.not.equal(null)\r",
							"    pm.expect(jsonData.films).to.not.equal(null)\r",
							"    pm.expect(jsonData.species).to.not.equal(null)\r",
							"    pm.expect(jsonData.vehicles).to.not.equal(null)\r",
							"    pm.expect(jsonData.starships).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test('check if Value is not empty', function(){\r",
							"    let jsonData = pm.response.json()\r",
							"    pm.expect(jsonData.people).not.equal(\"\")\r",
							"    pm.expect(jsonData.planets).not.equal(\"\")\r",
							"    pm.expect(jsonData.films).not.equal(\"\")\r",
							"    pm.expect(jsonData.species).not.equal(\"\")\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\")\r",
							"    pm.expect(jsonData.starships).not.equal(\"\")\r",
							"})\r",
							"\r",
							"pm.test('Field correspond to a specific value', function(){\r",
							"    let jsonData = pm.response.json()\r",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\")\r",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\")\r",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\")\r",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\")\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\")\r",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\")\r",
							"})\r",
							"\r",
							"pm.test('Status code is 200 and OK', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"})\r",
							"\r",
							"pm.test('Response Time is less 1000s', function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"})\r",
							"\r",
							"pm.test('To have specific header', function(){\r",
							"    pm.response.to.have.header('Content-Type')\r",
							"    pm.response.to.be.header('Content-Type', 'application/json')\r",
							"})\r",
							"\r",
							"pm.test('Cookies exists', function(){\r",
							"    pm.cookies.has('Cookie_1')    \r",
							"})\r",
							"\r",
							"pm.test('Cookies value', function(){\r",
							"    try{\r",
							"        let MY_COOKIE = pm.cookies.get('Cookie_1')\r",
							"        console.log(MY_COOKIE)\r",
							"    } catch (error) {\r",
							"        console.log('SOME PROBLEM WITH COOKIE' + error)\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "JSON schema test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let dataBase = JSON.parse(responseBody)\r",
							"\r",
							"let schema = {\r",
							"    'type': 'object',\r",
							"    'rejuired': [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    'properties': {\r",
							"        \"people\":{'type': 'string'},\r",
							"        \"planets\":{'type': 'string'},\r",
							"        \"films\":{'type': 'string'},\r",
							"        \"species\":{'type': 'string'},\r",
							"        \"vehicles\":{'type': 'string'},\r",
							"        \"starships\":{'type': 'string'}\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Body is correct', function(){\r",
							"    pm.expect(tv4.validate(dataBase, schema)).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let dataBase = JSON.parse(responseBody)\r",
							"\r",
							"let schema = {\r",
							"    'type': 'object',\r",
							"    'required': [\"name\", \"homeworld\", \"films\", \"species\", \"starships\"],\r",
							"    'properties': {\r",
							"        \"name\":{'type': 'string'},\r",
							"        \"homeworld\":{'type': 'string'},\r",
							"        \"films\":{\r",
							"            'type': 'array',\r",
							"            'items': {'type': 'string'}\r",
							"        },\r",
							"        \"species\":{\r",
							"            'type': 'array',\r",
							"            'items': {'type': 'string'}\r",
							"        },\r",
							"        \"starships\":{\r",
							"            'type': 'array',\r",
							"            'items': {'type': 'string'}\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Body is correct', function(){\r",
							"    pm.expect(tv4.validate(dataBase, schema)).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		}
	]
}